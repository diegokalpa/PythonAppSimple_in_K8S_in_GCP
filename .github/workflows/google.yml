# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
# To configure this workflow:
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: website-gcp-terra
  GKE_CLUSTER: diego-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: pythonappsimple
  REPOSITORY: gcr.iosdsd

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

  #authentication via credentials json  
    - uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ secrets.CREDENTIALS_GCP }}
        project_id: ${{ env.PROJECT_ID }}
        registry: gcr.io
        export_default_credentials: true

    # Configure Docker for GCP
    - name: Configure docker for GCP
      run: gcloud auth configure-docker

    # Build the Docker image
    - name: build
      run: docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME:latest .
    
    # Push Image to GCR
    - name: Push to Google Container Registry
      run:  docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest

  # Deploy sample image to the GKE cluster 
    - name: Deploy
      run: |-
        gcloud container clusters get-credentials "diego-cluster" --region=us-central1
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide